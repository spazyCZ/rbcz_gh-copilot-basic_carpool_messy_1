name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 app.py utils.py run.py config.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py utils.py run.py config.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy app.py utils.py --ignore-missing-imports || true

    - name: Security check with bandit
      run: |
        bandit -r app.py utils.py run.py -f json -o bandit-report.json || true
        bandit -r app.py utils.py run.py

    - name: Check for known security vulnerabilities
      run: |
        safety check || true

    - name: Run unit tests
      run: |
        pytest tests/test_app.py tests/test_utils.py -v --tb=short

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short

    - name: Run security tests
      run: |
        pytest tests/test_security.py -v --tb=short

    - name: Run performance tests (quick)
      run: |
        pytest tests/test_performance.py -v --tb=short -m "not slow"

    - name: Run all tests with coverage
      run: |
        pytest --cov=app --cov=utils --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-security-report.json
      continue-on-error: true

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-security-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8

    - name: Check code formatting with Black
      run: |
        black --check app.py utils.py run.py config.py tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only app.py utils.py run.py config.py tests/

    - name: Lint with flake8
      run: |
        flake8 app.py utils.py run.py config.py tests/

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v --tb=short --benchmark-json=benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json
